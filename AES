{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AES","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMAaXDOBLJ+jP+oP2SwcZ3h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"f_pQGpOnZi5J"},"outputs":[],"source":["!pip install pycryptodome"]},{"cell_type":"code","source":["import os\n","from Crypto.Util.Padding import pad, unpad\n","from Crypto.Cipher import AES \n","\n","def getKey(keysize):\n","    key = os.urandom(keysize)\n","    return key\n","\n","def getIV(blocksize):\n","    iv=os.urandom(blocksize)\n","    return iv \n","\n","KEYSIZE = 16\n","BLOCKSIZE = 16\n","plaintext = \"Hello! Infomration Security\"\n","\n","key = getKey(KEYSIZE)\n","iv = getIV(BLOCKSIZE) \n","\n","cipher1 = AES.new(key, AES.MODE_CBC, iv)\n","ciphertext = cipher1.encrypt(pad(plaintext.encode(), BLOCKSIZE)) \n","print(ciphertext)\n","\n","cipher2 = AES.new(key, AES.MODE_CBC, iv)\n","plaintext2 = unpad(cipher2.decrypt(ciphertext), BLOCKSIZE) \n","print(plaintext2.decode())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lVwyPFyj8CvT","executionInfo":{"status":"ok","timestamp":1654568519999,"user_tz":-330,"elapsed":6,"user":{"displayName":"Rus Des","userId":"16284630375364201705"}},"outputId":"b3e77190-3173-4d6f-889e-233950d84c88"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["b'z\\xa8\\xc8\\x8e&a\\x042\\x07\\xd3\\xa8\\x8f>\\xcc\\xba\\x04 \\xcer\\xf20\\x00a\\xa9w\\x19, D\\xb6N\\xa8'\n","Hello! Infomration Security\n"]}]},{"cell_type":"code","source":["#@title\n","from Crypto.Cipher import DES\n","\n","def pad(text):\n","    n = len(text) % 8\n","    return text + (b' ' * n)\n","\n","\n","key = b'hello123'\n","text1 = b'Python is the Best Language!'\n","\n","des = DES.new(key, DES.MODE_ECB)\n","\n","padded_text = pad(text1)\n","encrypted_text = des.encrypt(padded_text)\n","\n","print(encrypted_text)\n","print(des.decrypt(encrypted_text))"],"metadata":{"id":"175T-BTd8I52","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"-WxI7nXv-JPP"},"execution_count":null,"outputs":[]}]}